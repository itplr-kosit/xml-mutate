// Generated by delombok at Fri Aug 13 16:07:39 CEST 2021
package de.kosit.xmlmutate.mutation;

import java.net.URI;
import java.util.List;
import java.util.Objects;

import de.kosit.xmlmutate.expectation.SchematronRuleExpectation;

/**
 * Information about a Schematron file.
 *
 * @author Andreas Penski
 */
public class Schematron {
    /**
     * Default-Name auf der CMD-Line kein eigener Name angegeben wurde
     */
    public static final String DEFAULT_NAME = "SCHEMATRON";
    /**
     * Symbolic name for this file of Schematron rules.
     */
    private final String name;
    /**
     * The URI of the Schematron file.
     */
    private final URI uri;
    /**
     * The list of all rules-Ids contained within the schematron file
     */
    private final List<String> rulesIds;

    public Schematron(final String name, final URI uri, final List<String> rulesIds) {
        this.name = name;
        this.uri = uri;
        this.rulesIds = rulesIds;
    }

    /**
     * Symbolic name for this file of Schematron rules.
     */
    public String getName() {
        return this.name;
    }

    /**
     * The URI of the Schematron file.
     */
    public URI getUri() {
        return this.uri;
    }

    /**
     * The list of all rules-Ids contained within the schematron file
     */
    public List<String> getRulesIds() {
        return this.rulesIds;
    }

    /**
     * Check if a given rule is declared in this schematron file
     *
     * @param schematronRuleExpectation - the expectation
     * @return true or false
     */
    public boolean hasRule(final SchematronRuleExpectation schematronRuleExpectation) {
        return rulesIds.contains(schematronRuleExpectation.getRuleName()) && this.name.equalsIgnoreCase(schematronRuleExpectation.getSource());
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        final Schematron that = (Schematron) o;
        return uri.equals(that.uri);
    }

    @Override
    public int hashCode() {
        return Objects.hash(uri);
    }
}
