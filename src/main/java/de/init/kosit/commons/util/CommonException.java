// Generated by delombok at Fri Aug 13 16:11:22 CEST 2021
package de.init.kosit.commons.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Handled Exception.
 * 
 * @author Andreas Penski
 */
public class CommonException extends RuntimeException {
    private final List<BusinessError> errors;

    /**
     * Creates a HandledException for a business error.
     *
     * @param error list of the single associated business error
     */
    public CommonException(final NamedError error) {
        this(new BusinessError(error));
    }

    /**
     * Creates a HandledException for a business error.
     *
     * @param error list of the single associated business error
     * @param e an optional exception
     */
    public CommonException(final NamedError error, final Exception e) {
        this(new BusinessError(error), e);
    }

    /**
     * Creates a HandledException for a business error.
     *
     * @param error list of the single associated business error
     * @param params the text parameters
     */
    public CommonException(final NamedError error, final Object... params) {
        this(new BusinessError(error, params));
    }

    /**
     * Creates a HandledException for a business error.
     *
     * @param error list of the single associated business error
     */
    public CommonException(final BusinessError error) {
        this(Collections.singletonList(error));
    }

    /**
     * Creates a HandledException for a business error.
     *
     * @param error list of the single associated business error
     * @param cause cause of the exception
     */
    public CommonException(final BusinessError error, final Exception cause) {
        this(Collections.singletonList(error), cause);
    }

    /**
     * Creates a HandledException for a list of business errors.
     *
     * @param errors list of all associated business errors
     */
    public CommonException(final Collection<BusinessError> errors) {
        this(errors, null);
    }

    /**
     * Creates a HandledException for a list of business errors and tracking the cause.
     *
     * @param errors a list of associated business errors
     * @param cause cause of the exception
     */
    public CommonException(final Collection<BusinessError> errors, final Exception cause) {
        super(cause);
        final List<BusinessError> b = new ArrayList<>();
        b.addAll(errors);
        this.errors = Collections.unmodifiableList(b);
    }

    /**
     * Creates a HandledException for a list of business errors and tracking the cause.
     *
     * @param errors list of all associated business errors
     * @param cause cause of the exception
     */
    public CommonException(final List<BusinessError> errors, final Exception cause) {
        super(cause);
        this.errors = Collections.unmodifiableList(errors);
    }

    /**
     * Return if the NamedError is included within {@link CommonException#errors}.
     *
     * @param namedError namedError
     *
     * @return {@code true} if the NamedError is included within {@link CommonException#errors}
     */
    public boolean containsNamedError(final NamedError namedError) {
        for (final BusinessError error : getErrors()) {
            if (error.getMessageId().equals(namedError)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public String getMessage() {
        return String.join(",", getMessages());
    }

    public Collection<String> getMessages() {
        return getErrors().stream().map(Message::getMessage).collect(Collectors.toSet());
    }

    @java.lang.SuppressWarnings("all")
    public List<BusinessError> getErrors() {
        return this.errors;
    }
}
