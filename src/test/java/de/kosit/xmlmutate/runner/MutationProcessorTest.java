package de.kosit.xmlmutate.runner;

import static de.kosit.xmlmutate.TestHelper.createInstruction;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.xmlunit.assertj.XmlAssert.assertThat;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import javax.xml.transform.Source;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.xmlunit.builder.Input;

import de.kosit.xmlmutate.cli.XmlMutateUtil;
import de.kosit.xmlmutate.mutation.Mutant;
import de.kosit.xmlmutate.parser.MutatorInstruction;

/**
 * MutationProcessorTest it is kind of integration test already
 */
@Tag("runner")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestMethodOrder(OrderAnnotation.class)
public class MutationProcessorTest {

    private static final Logger log = LoggerFactory.getLogger(MutationProcessorTest.class);

    // gets generated by first test
    Document doc = null;
    // get generated by first test
    Mutant mutant = null;

    @Test
    @Order(1)
    @DisplayName("Simple Doc mutation")

    void mutateSimpleDoc() {
        final String REMOVE_ATTR = "<root><?xmute mutator=\"remove\" attribute=\"aa bb\" ?><e aa=\"have a\" bb=\"have b\"></e></root>";

        final String REMOVE_ELEM = "<root><?xmute mutator=\"remove\" attribute=\"aa bb\" ?><e >hi</e></root>";

        final List<MutatorInstruction> instruction = createInstruction(REMOVE_ATTR);

        List<Mutant> mutants = instruction.stream().findFirst().get().createMutants();

        assertEquals(mutants.size(), 1);
        mutant = mutants.get(0);
        this.doc = mutant.getPI().getOwnerDocument();
        log.trace("Applying mutation");
        MutationProcessor.mutateDocument(doc, mutant, false);

        // log.trace("mutant={}", XmlMutateUtil.printToString(m.getMutatedFragment()));
        log.trace("new doc={}", XmlMutateUtil.printToString(doc));
        Source source = Input.fromNode(doc).build();

        assertThat(source).hasXPath("/");
        assertThat(source).doesNotHaveXPath("/root/e/@aa");
        assertThat(source).doesNotHaveXPath("/root/e/@bb");

    }

    @Test
    @Order(2)
    @DisplayName("Writing Document to disk")
    void serializeDoc() {
        assertNotNull(this.doc);
        assertNotNull(this.mutant);
        final Path targetDir = Paths.get(System.getProperty("user.dir"));
        MutationProcessor.serialize(doc, mutant, targetDir);
        assertDoesNotThrow(() -> {
            MutationProcessor.serialize(doc, mutant, targetDir);
        });
    }

}
